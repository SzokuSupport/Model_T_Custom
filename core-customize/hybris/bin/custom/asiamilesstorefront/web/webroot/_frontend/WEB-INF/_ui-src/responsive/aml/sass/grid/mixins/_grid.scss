/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {

  // @each $breakpoint, $grid-gutter-width in $gutter {
  //   @include media-breakpoint-up($breakpoint, $breakpoints) {
  //     padding-right: $grid-gutter-width / 2;
  //     padding-left: $grid-gutter-width / 2;
  //   }
  // }
}

@mixin make-container-fluid-mobile($gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $grid-gutter-width in $gutter {
    @if $breakpoint == 'xs' {
      @include media-breakpoint-down($breakpoint, $breakpoints) {
        padding-right: $grid-gutter-width / 2;
        padding-left: $grid-gutter-width / 2;
        margin-left:auto;
        margin-right:auto;
      }
    } @else if $breakpoint == 'sm' {
      @include media-breakpoint-down($breakpoint, $breakpoints) {
        padding-right: $grid-gutter-width / 2;
        padding-left: $grid-gutter-width / 2;
        margin-left:auto;
        margin-right:auto;
      }
    }
  }
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($container-margin: $container-margin, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $margin in $container-margin {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @if $breakpoint == 'lg'{
        max-width: map-get($container-max-widths, $breakpoint);
        margin-left: auto;
        margin-right: auto;
      } @else{
        margin-left: $margin ;
        margin-right: $margin;
      }
    }
  }
}

@mixin make-row($gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  display: flex;
  flex-wrap: wrap;

  @each $breakpoint, $grid-gutter-width in $gutter {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      margin-right: -$grid-gutter-width / 2;
      margin-left: -$grid-gutter-width / 2;
    }
  }
}

@mixin make-col-ready($gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  
  @each $breakpoint, $grid-gutter-width in $gutter {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      padding-right: $grid-gutter-width / 2;
      padding-left: $grid-gutter-width / 2;
    }
  }
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}
